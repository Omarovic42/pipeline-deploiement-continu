name: Deploy API

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install
        working-directory: ./api

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Set up SSH key (private)
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      - name: Set up SSH public key for Terraform
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY_PUB }}" > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub

      - name: Initialize Terraform
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform init

      - name: Debug AWS credentials before apply
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then echo "AWS_ACCESS_KEY_ID missing!"; exit 1; else echo "AWS_ACCESS_KEY_ID found"; fi
          if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then echo "AWS_SECRET_ACCESS_KEY missing!"; exit 1; else echo "AWS_SECRET_ACCESS_KEY found"; fi
          if [ -z "$AWS_DEFAULT_REGION" ]; then echo "AWS_DEFAULT_REGION missing!"; exit 1; else echo "AWS_DEFAULT_REGION found"; fi

      - name: Import AWS key pair (idempotent)
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          terraform import aws_key_pair.deployer deployer-key || true

      - name: Import AWS security group (idempotent)
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          terraform import aws_security_group.api_sg sg-033ac64c7b0006830 || true

      - name: Apply Terraform configuration
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          terraform apply -auto-approve -var "ssh_public_key_path=$HOME/.ssh/id_rsa.pub"

      - name: Wait for instance to be ready
        run: sleep 30

      - name: Add EC2 hosts to known_hosts
        run: |
          ssh-keyscan -H 13.39.51.64 >> ~/.ssh/known_hosts
          ssh-keyscan -H 51.44.13.45 >> ~/.ssh/known_hosts
          ssh-keyscan -H 35.180.205.56 >> ~/.ssh/known_hosts
          ssh-keyscan -H 35.180.138.70 >> ~/.ssh/known_hosts

      - name: Execute release script
        run: |
          chmod +x release.sh
          ./release.sh
        env:
          GITHUB_USERNAME: Omarovic42
          REPO_NAME: pipeline-deploiement-continu
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
